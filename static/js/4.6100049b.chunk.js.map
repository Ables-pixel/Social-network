{"version":3,"sources":["HOC/AuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","name","DialogItem","path","id","className","s","dialog","active","Message","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"2NAMIA,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAUtC,OAFmCM,YAAQX,EAARW,CAAoCL,K,oBCnB3EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,0HCI7MC,EAAcC,YAAiB,IAiBtBC,cAAU,CAACC,KAAM,2BAAjBD,EAfQ,SAACR,GACpB,OACI,uBAAMU,SAAUV,EAAMW,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAClBC,SAAU,CAACC,IAAUV,GACrBW,YAAY,qBACLC,KAAK,qBAEhB,8BACI,kDCVVC,EAAa,SAACnB,GAChB,IAAIoB,EAAO,YAAcpB,EAAMqB,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASxB,GAAImB,EAAb,SAAoBpB,EAAMkB,UAI5BQ,EAAU,SAAC1B,GACb,IAAIoB,EAAO,aAAepB,EAAMqB,GAEhC,OAAO,qBAAKC,UAAWC,IAAEC,OAAlB,SACH,cAAC,IAAD,CAASvB,GAAImB,EAAb,SAAoBpB,EAAM2B,aAkCnBC,EA9BC,SAAC5B,GAEb,IAAIP,EAAQO,EAAM6B,YAEdC,EAAmBrC,EAAMsC,QAAQC,KAAK,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYf,KAAMe,EAAEf,KAAiBG,GAAIY,EAAEZ,IAAZY,EAAEZ,OAC5Ea,EAAmBzC,EAAM0C,SAASH,KAAK,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAST,QAASS,EAAET,QAAoBN,GAAIe,EAAEf,IAAZe,EAAEf,OAC/D5B,EAAM4C,eAO3B,OAAKrC,EAAMN,OAGP,sBAAK4B,UAAWC,IAAEQ,QAAlB,UACI,qBAAKT,UAAWC,IAAEe,aAAlB,SACMR,IAEN,qBAAKR,UAAWC,IAAEY,SAAlB,SACG,oCAAQD,EAAR,SAEH,cAAC,EAAD,CAAgBxB,SAdJ,SAAC6B,GACjBvC,EAAMwC,YAAYD,EAAOF,sBAGH,cAAC,IAAD,CAAUpC,GAAI,Y,iCCX7BwC,sBACXtC,aAlBkB,SAACV,GACnB,MAAO,CACHoC,YAAapC,EAAMoC,gBAIF,SAACa,GACtB,MAAO,CACHF,YAAa,SAACH,GACVK,EAASC,YAAmBN,SAUpCzC,IAFW6C,CAGbb","file":"static/js/4.6100049b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>\r\n\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1N20F\",\"dialog\":\"Dialogs_dialog__2hsDK\",\"dialogsItems\":\"Dialogs_dialogsItems__3dAjt\",\"active\":\"Dialogs_active__3ak8K\",\"messages\":\"Dialogs_messages__1Mdqc\",\"message\":\"Dialogs_message__3GTI-\"};","import {maxLengthCreator, required} from \"../../Utils/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport Textarea from \"../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                validate={[required, maxLength50]}\r\n                placeholder=\"Enter your message\"\r\n                       name=\"newMessageBody\"/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )}\r\n\r\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Redirect} from \"react-router\";\r\nimport AddMessageForm from \"./AddMessageForm\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nconst Message = (props) => {\r\n    let path = \"/messages/\" + props.id;\r\n\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.message}</NavLink>\r\n    </div>\r\n}\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements =  state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} /> );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} id={m.id}/> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/Login\"} />\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n               <div> { messagesElements } </div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../HOC/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}